parameters:
  - name: dockerType
    type: string
    default: ""

steps:
  - template: submodules.yaml

  # Check if the image exists locally
  - bash: |
      IMAGE_NAME="jrtc-${{ parameters.dockerType }}"
      IMAGE_TAG="$(imageTag)"
      if docker image inspect $IMAGE_NAME:$IMAGE_TAG > /dev/null 2>&1; then
        echo "Image $IMAGE_NAME:$IMAGE_TAG already exists locally. Skipping build."
        echo "##vso[task.setvariable variable=skipBuild;isOutput=true]true"
      else
        echo "Image $IMAGE_NAME:$IMAGE_TAG does not exist locally. Proceeding with build."
        echo "##vso[task.setvariable variable=skipBuild;isOutput=true]false"
      fi
    displayName: 'Check if Image Exists Locally'
    name: checkImage

  # Use inline Bash to decide whether to trigger the build
  - bash: |
      if [[ "$(skipBuild)" == "false" ]]; then
        echo "Proceeding with build."
        exit 1  # This will cause the next step to run
      else
        echo "Skipping build."
        exit 0
      fi
    displayName: 'Determine if Build Should Run'
    name: determineBuild
    continueOnError: true  # Allow pipeline to continue execution

  # Execute the build step only if the previous step fails (meaning the image was NOT found)
  - template: images/build.v2.yaml@templates
    parameters:
      arguments: ""
      dockerfile: deploy/${{ parameters.dockerType }}.Dockerfile
      registry: $(containerRegistry)
      repository: jrtc-${{ parameters.dockerType }}
      tags: |
        $(imageTag)
    dependsOn: determineBuild  # Ensures this step only runs after the check
    condition: failed()  # Runs only if the image does not exist
